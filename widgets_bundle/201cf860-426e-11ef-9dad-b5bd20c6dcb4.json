{
  "entityType" : "WIDGETS_BUNDLE",
  "entity" : {
    "alias" : "publisher_device_information",
    "description" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGETS_BUNDLE",
      "id" : "201cf860-426e-11ef-9dad-b5bd20c6dcb4"
    },
    "image" : null,
    "name" : "Publisher Device Information",
    "title" : "Publisher Device Information"
  },
  "widgets" : [ {
    "alias" : "publisher_device_information",
    "name" : "Publisher Device Information",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div tb-toast toastTarget=\"{{ toastTargetId }}\" style=\"width: 100%; height: 100%;\">\r\n    <form *ngIf=\"attributeUpdateFormGroup\"\r\n          class=\"attribute-update-form\"\r\n          [formGroup]=\"attributeUpdateFormGroup\"\r\n          (ngSubmit)=\"updateAttribute()\">\r\n        <div style=\"padding: 0 8px; margin: auto 0;\">\r\n            <div class=\"attribute-update-form__grid\" [fxShow]=\"entityDetected && isValidParameter && dataKeyDetected\">\r\n                <div class=\"grid__element\">\r\n                    <mat-form-field class=\"mat-block\" style=\"width: 100%;\"\r\n                                    floatLabel=\"{{settings.showLabel ? 'auto' : 'always'}}\"\r\n                                    [hideRequiredMarker]=\"!settings.showLabel\">\r\n                        <mat-label>{{ settings.showLabel ? labelValue : '' }}</mat-label>\r\n                        <input matInput\r\n                               formControlName=\"currentValue\"\r\n                               [required]=\"settings.isRequired\"\r\n                               (focus)=\"isFocused = true\"\r\n                               (blur)=\"changeFocus()\"\r\n                               maxlength=\"{{settings.maxLength}}\"\r\n                               minlength=\"{{settings.minLength}}\"/>\r\n                        <mat-error *ngIf=\"attributeUpdateFormGroup.get('currentValue').hasError('required') && settings.isRequired\">\r\n                            {{requiredErrorMessage}}\r\n                        </mat-error>\r\n                    </mat-form-field>    \r\n                </div>\r\n    \r\n                <div class=\"grid__element\">\r\n                    <button mat-icon-button class=\"applyChanges\"\r\n                               type=\"submit\"\r\n                               [disabled]=\"(originalValue === attributeUpdateFormGroup.get('currentValue').value || attributeUpdateFormGroup.invalid || !attributeUpdateFormGroup.dirty) && (originalValue === attributeUpdateFormGroup.get('currentValue').value || settings.isRequired)\"\r\n                               matTooltip=\"{{ 'widgets.input-widgets.update-attribute' | translate }}\"\r\n                               matTooltipPosition=\"above\">\r\n                        <mat-icon>check</mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button class=\"discardChanges\"\r\n                               type=\"button\"\r\n                               [disabled]=\"originalValue === attributeUpdateFormGroup.get('currentValue').value\"\r\n                               (click)=\"attributeUpdateFormGroup.get('currentValue').patchValue(originalValue); isFocused = false\"\r\n                               matTooltip=\"{{ 'widgets.input-widgets.discard-changes' | translate }}\"\r\n                               matTooltipPosition=\"above\">\r\n                        <mat-icon>close</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n    \r\n            <div style=\"text-align: center; font-size: 18px; color: #a0a0a0;\" [fxHide]=\"entityDetected\" [innerHtml]=\"message\"></div>\r\n            <div style=\"text-align: center; font-size: 18px; color: #a0a0a0;\"\r\n                 [fxShow]=\"entityDetected && !dataKeyDetected\">\r\n                {{ 'widgets.input-widgets.no-attribute-selected' | translate }}\r\n            </div>\r\n            <div style=\"text-align: center; font-size: 18px; color: #a0a0a0;\"\r\n                 [fxShow]=\"entityDetected && !isValidParameter\">\r\n                {{ 'widgets.input-widgets.timeseries-not-allowed' | translate }}\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n",
      "templateCss" : "\n#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
      "controllerScript" : "let $scope;\r\nlet settings;\r\nlet attributeService;\r\nlet utils;\r\nlet translate;\r\n\r\nself.onInit = function() {\r\n    self.ctx.ngZone.run(function() {\r\n       init(); \r\n       self.ctx.detectChanges(true);\r\n    });\r\n};\r\n\r\nfunction init() {\r\n    $scope = self.ctx.$scope;\r\n    attributeService = $scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\r\n    utils = $scope.$injector.get(self.ctx.servicesMap.get('utils'));\r\n    translate = $scope.$injector.get(self.ctx.servicesMap.get('translate'));\r\n    $scope.toastTargetId = 'input-widget' + utils.guid();\r\n    settings = utils.deepClone(self.ctx.settings) || {};\r\n    settings.showLabel = utils.defaultValue(settings.showLabel, true);\r\n    settings.showResultMessage = utils.defaultValue(settings.showResultMessage, true);\r\n    settings.isRequired = utils.defaultValue(settings.isRequired, true);\r\n    $scope.settings = settings;\r\n    $scope.isValidParameter = true;\r\n    $scope.dataKeyDetected = false; \r\n    $scope.message = translate.instant('widgets.input-widgets.no-entity-selected');\r\n    \r\n    console.log(self.ctx.datasources[0])\r\n    \r\n    $scope.requiredErrorMessage = utils.customTranslation(settings.requiredErrorMessage, settings.requiredErrorMessage) || translate.instant('widgets.input-widgets.entity-attribute-required');\r\n    $scope.labelValue = utils.customTranslation(settings.labelValue, settings.labelValue) || translate.instant('widgets.input-widgets.value');\r\n    \r\n    var validators = [$scope.validators.minLength(settings.minLength),\r\n        $scope.validators.maxLength(settings.maxLength)];\r\n    \r\n    if (settings.isRequired) {\r\n        validators.push($scope.validators.required);\r\n    }\r\n    \r\n    $scope.attributeUpdateFormGroup = $scope.fb.group({\r\n        currentValue: [undefined, validators]\r\n    });\r\n\r\n    if (self.ctx.datasources && self.ctx.datasources.length) {\r\n        var datasource = self.ctx.datasources[0];\r\n        if (datasource.type === 'entity') {\r\n            if (datasource.entityType === 'DEVICE') {\r\n                if (datasource.entityType && datasource.entityId) {\r\n                    $scope.entityName = datasource.entityName;\r\n                    if (settings.widgetTitle && settings.widgetTitle.length) {\r\n                        $scope.titleTemplate = utils.customTranslation(settings.widgetTitle, settings.widgetTitle);\r\n                    } else {\r\n                        $scope.titleTemplate = self.ctx.widgetConfig.title;\r\n                    }\r\n    \r\n                    $scope.entityDetected = true;\r\n                }\r\n            } else {\r\n                $scope.message = translate.instant('widgets.input-widgets.not-allowed-entity');\r\n            }\r\n        }\r\n        if (datasource.dataKeys.length) {\r\n            if (datasource.dataKeys[0].type !== \"attribute\") {\r\n                $scope.isValidParameter = false;\r\n            } else {\r\n                $scope.currentKey = datasource.dataKeys[0].name; \r\n                $scope.dataKeyType = datasource.dataKeys[0].type;\r\n                $scope.dataKeyDetected = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    self.ctx.widgetTitle = utils.createLabelFromDatasource(self.ctx.datasources[0], $scope.titleTemplate);\r\n\r\n    $scope.updateAttribute = function () {\r\n        $scope.isFocused = false;\r\n        if ($scope.entityDetected) {\r\n            var datasource = self.ctx.datasources[0];\r\n            var value = $scope.attributeUpdateFormGroup.get('currentValue').value;\r\n            \r\n            if (!$scope.attributeUpdateFormGroup.get('currentValue').value.length) {\r\n                value = null;\r\n            } else {\r\n                try {\r\n                    value = JSON.parse(value); // Parse the value as JSON\r\n                } catch (e) {\r\n                    $scope.showErrorToast(translate.instant('widgets.input-widgets.invalid-json'), 'bottom', 'left', $scope.toastTargetId);\r\n                    return;\r\n                }\r\n            }\r\n            \r\n            let entityType = datasource.entityFilter.entityType\r\n            \r\n            datasource.entityFilter.entityList.forEach((entityId) => {\r\n                attributeService.saveEntityAttributes(\r\n                {entityType: entityType, id: entityId},\r\n                'SHARED_SCOPE',\r\n                [\r\n                    {\r\n                        key: $scope.currentKey, // Use the dynamic key here\r\n                        value\r\n                    }\r\n                ]\r\n            ).subscribe(\r\n                function success() {\r\n                    $scope.originalValue = $scope.attributeUpdateFormGroup.get('currentValue').value;\r\n                    if (settings.showResultMessage) {\r\n                        $scope.showSuccessToast(translate.instant('widgets.input-widgets.update-successful'), 1000, 'bottom', 'left', $scope.toastTargetId);\r\n                    }\r\n                },\r\n                function fail() {\r\n                    if (settings.showResultMessage) {\r\n                        $scope.showErrorToast(translate.instant('widgets.input-widgets.update-failed'), 'bottom', 'left', $scope.toastTargetId);\r\n                    }\r\n                }\r\n                );\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.changeFocus = function () {\r\n        if ($scope.attributeUpdateFormGroup.get('currentValue').value === $scope.originalValue) {\r\n            $scope.isFocused = false;\r\n        }\r\n    }\r\n}\r\n\r\nself.onDataUpdated = function() {\r\n    try {\r\n        if ($scope.dataKeyDetected) {\r\n            if (!$scope.isFocused) {\r\n                $scope.originalValue = self.ctx.data[0].data[0][1];\r\n                $scope.attributeUpdateFormGroup.get('currentValue').patchValue($scope.originalValue);\r\n                self.ctx.detectChanges();\r\n            }\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nself.onResize = function() {\r\n\r\n}\r\n\r\nself.typeParameters = function() {\r\n    return {\r\n        maxDatasources: 1,\r\n        maxDataKeys: 1,\r\n        singleEntity: true\r\n    }\r\n}\r\n\r\nself.onDestroy = function() {\r\n\r\n}\r\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Publisher Device Information\"}"
    },
    "bundleAlias" : "publisher_device_information",
    "createdTime" : 1721022750008,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "6c269b80-426e-11ef-9dad-b5bd20c6dcb4"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "3ffc4020-4196-11ee-969d-5b2424a9a3ad"
    }
  } ],
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}